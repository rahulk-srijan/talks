<?php
DEFINE("library_vocab_id",5);

global $color_variable;
$color_variable = array(
    'color-purple' => '#642f7a',
    'color-skyblue' => '#00abee',
    'color-mahendi' => '#738102',
    'color-magenta' => '#ad0059',
    'color-orange' => '#e37222',
    'color-khakhi' => '#ceb003',
    'color-blue' => '#0066be',
    'color-red' => '#ff0000',
    'color-pink' => '#ff00b4',
    'color-green' => '#1d8202',
);

/**
 * Custom callback from blocks section
 * Called from block named "video library name post menu"
 * return string
**/
function getName_channel() {
    if(function_exists('get_node_type')) {
        $node_type = get_node_type(arg(1));
    }
    if((arg(0) == 'taxonomy' && is_numeric(arg(2)) || $node_type == 'upload_video')) {
        if(arg(2) != '') {
            $term = taxonomy_term_load(arg(2));
            if($term->vid == 5) {
                $tid = arg(2);
            }
            else {
                $tid = $term->field_library['und'][0]['tid'];
            }
        }
        else {
            if(function_exists('get_channel_tid_from_node')) {
                $tid = get_channel_tid_from_node(arg(1));// called from custom_channel.module
            }
        }
    } else {
       if(isset($_GET['ch_tid'])) {
         $tid = $_GET['ch_tid'];
       }
    }
    $term = taxonomy_term_load($tid);
    $term_name = $term->name;
      
    if(function_exists('get_color_channel')) {
        $color = get_color_channel($tid);
    }
    
    $resource_check = $term->field_resources_link['und'][0]['value'];
    $resource_url = $term->field_resources_url['und'][0]['value'];
        
    $output .= '<div class ="post-menu-strip">';
    $output .= '<span class="lib-name inline-block float-left mstrip" style="color:'.$color.'">'.l($term_name,'taxonomy/term/'.$tid).'</span>';
    $output .= '<span class="default inline-block float-left mstrip">'.flag_create_link('default', $tid).'</span>';
    if($resource_check == 1) {
        $output .= '<span class="resources inline-block float-left mstrip">'.
                    l("> Resources",$resource_url,array('attributes'=>array('target'=>'_blank'))).'</span>';
    }
    $output .= '</div>';
    
    return $output;
}

/**
 * Custom callback for fetching the main color
 * @param $tid
 * return string
**/
function get_color_channel($tid) {
    $term = taxonomy_term_load($tid);
    $color = $term->field_color_title['und'][0]['rgb'];
    if ($color == '') {
        $color = '#000';
    }
    return $color;
}

/**
 * Custom Callback for displaying admin link for maanging channel
 * Called from block with id 54
 * return string
**/
function get_manage_channel_block() {
    $output = '';
    if(isset($_GET['channel_tid'])) {
        $options = array(
            'query' => array('channel_tid'=>$_GET['channel_tid']),
        );
        $output .= '<ul>';
        $output .= '<li>' . l("Manage Videos",'admin/manage-videos',$options) . '</li>';
        $output .= '<li>' . l("Manage Featured Videos",'admin/structure/nodequeue/8',$options) . '</li>';
        $output .= '<li>' . l("Manage Categories",'admin/manage-categories',$options) . '</li>';
        $output .= '<li>' . l("Manage Tags",'admin/manage-tags',$options) . '</li>';
        $output .= '</ul>';
    }
    
    return $output;
}

/**
 * Custom Callback for displaying admin link for tracking user report
 * Called from block with id 55
 * return string
**/
function get_manage_report_block() {
    $output = '';
    if(isset($_GET['channel_tid'])) {
        $options = array(
            'query' => array('channel_tid'=>$_GET['channel_tid']),
        );
        $output .= '<ul>';
        $output .= '<li>' . l("User Statistics",'admin/user-stat') . '</li>';
        $output .= '<li>' . l("Video Statistics",'admin/analytics',$options) . '</li>';
        $output .= '<li>' . l("File Download Statistics",'admin/downloads/reports',$options) . '</li>';
        $output .= '</ul>';
    }
    
    return $output;
}

/**
 * Custom callback for getting the type of node
 * Called in user_top_menu_link() in videolibrary_core.module file
 * @param $nid
 * return string
**/
function get_node_type($nid) {
    $type = db_query("SELECT type FROM node WHERE nid=:nid",array(':nid'=>$nid))->fetchField();
    return $type;
}

/**
 * Custom Callback for getting channel id from a node relation
 * Called from user_top_menu_link() in videolibrary_core.module file
 * @param $nid
 * return int
**/
function get_channel_tid_from_node($nid) {
    $channel_tid = db_query("SELECT field_library_tid FROM field_data_field_library WHERE entity_id=:nid",
                            array(':nid'=>$nid))->fetchField();
    return $channel_tid;
}

/**
 * Custom Callback for displaying download button at admin download statistics page
 * and show page title wrt channel name
 * Called from view named downloads
 * return string
**/
function get_download_report_title_and_button($link) {
    $output = '';
    
    if(isset($_GET['channel_tid'])) {
        if(function_exists('get_channel_name_from_tid')) {
            $channel_name = get_channel_name_from_tid($_GET['channel_tid']);
        }
       $output .= '<h4>' . $channel_name . t(" Download Statistics"). '</h4>';
    }
    $output .= '<p class="download-user-stats">'. l("Download",$link).'</p>';
    
    return $output;
}

/**
 * Custom callback to get channel name from tid passed in arguments
 * @param $ch_tid
 * return string
 * PLEASE DONT REMOVE THIS FUNCTIONS AS IT HAS MANY IMPACTS ON VIEWS
**/
function get_channel_name_from_tid($ch_tid) {
    if($ch_tid != '') {
       $channel_tid = $ch_tid;
       $term = taxonomy_term_load($channel_tid);
       $channel_name = $term->name;
    }
    
    return $channel_name;
}

/**
 * Custom callback function for the adding color class to the body tag
 * Called from hook_preprocess_html() in template.php
 * return string
**/
function adding_color_class_bodyTag() {
    global $color_variable;
    if(function_exists('get_node_type')) {
        $node_type = get_node_type(arg(1));
    }
    if((arg(0) == 'taxonomy' && is_numeric(arg(2)) || $node_type == 'upload_video')) {
        if(arg(2) != '') {
            $term = taxonomy_term_load(arg(2));
            if($term->vid == 5) {
                $arg = arg(2);
            }
            else {
                $arg = $term->field_library['und'][0]['tid'];
            }
        }
        else {
            if(function_exists('get_channel_tid_from_node')) {
                $arg = get_channel_tid_from_node(arg(1));// called from custom_channel.module
            }
        }
    }
    else {
       if(isset($_GET['ch_tid'])) {
         $arg = $_GET['ch_tid'];
       }
    }
    $term = taxonomy_term_load($arg);
    $selected_color = $term->field_color_title['und'][0]['rgb'];
    foreach($color_variable as $key => $color_val) {
        if($selected_color == $color_val) {
            $color_class = $key;
        }
    }
    return $color_class;
}

function get_related_tags($channel_tid) {
    $query = db_query("SELECT td.tid,td.name FROM field_data_field_library fl, taxonomy_term_data td
                      WHERE fl.field_library_tid = :tid AND fl.entity_id=td.tid AND fl.bundle=:bundle",
                      array(':tid' => $channel_tid,':bundle'=>'channel_tags'))->fetchAll();
}

/**
 * Implementation of hook_taxonomy_term_insert
 * @param $term
 * return array nodequeue
 **/
function custom_channel_taxonomy_term_insert($term) {
    if($term->vid == library_vocab_id) {
        create_nodequeue($term);
    }
}

/**
 * Implementation of hook_taxonomy_term_update
 * @param $term
 * return array nodequeue
 **/

function custom_channel_taxonomy_term_update($term) {
    if($term->vid == library_vocab_id) {
        $query = db_query("SELECT reference FROM nodequeue_queue WHERE reference = :tid",
                          array(':tid'=>$term->tid))->fetchField();
        if($query == '') {
            create_nodequeue($term);
        }
    }
}

/**
 * Custom callback function for creating a nodequeue
 * @param $term
 * return array
**/
function create_nodequeue($term) {
    $queue_data = array(
            'queue1' => array(
              'title' => $term->name.' nodequeue',
              'subqueue_title' => '',
              'size' => '0',
              'reverse' => 0,
              'link' => 'Add to queue',
              'link_remove' => 'Remove from queue',
              'roles' => array (),
              'types' => array ( 0 => 'upload_video'),
              'i18n' => 1,
              'op' => 'Submit',
              'submit' => 'Submit',
              'owner' => 'nodequeue',
              'show_in_links' => true,
              'show_in_tab' => true,
              'show_in_ui' => true,
              'reference' => $term->tid,
              'subqueues' => array (),
              'new' => true,
              'add_subqueue' => array ( 0 => $term->name.' nodequeue'), // match title above
            ),
        );
        foreach ($queue_data as $q) {
          $queue = (object) $q;
          $qid = nodequeue_save($queue); // sets $queue->qid if needed.
        }
}
